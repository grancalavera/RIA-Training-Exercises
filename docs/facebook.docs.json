[
  {
    "tags": [],
    "description": {
      "full": "<p>Facebook module</p>\n\n<p>Provides basic initialization functionality and shortcuts for common tasks.</p>\n\n<h2>Dependencies</h2>\n\n<ul>\n<li>RequireJS</li>\n<li>RequireJS/text</li>\n<li>jQuery</li>\n<li>Underscore.js</li>\n<li>Backbone.js</li>\n<li>Underscore-ext.js</li>\n</ul>",
      "summary": "<p>Facebook module</p>",
      "body": "<p>Provides basic initialization functionality and shortcuts for common tasks.</p>\n\n<h2>Dependencies</h2>\n\n<ul>\n<li>RequireJS</li>\n<li>RequireJS/text</li>\n<li>jQuery</li>\n<li>Underscore.js</li>\n<li>Backbone.js</li>\n<li>Underscore-ext.js</li>\n</ul>"
    },
    "ignore": false
  },
  {
    "tags": [],
    "description": {
      "full": "<p>@ignore</p>",
      "summary": "<p>@ignore</p>",
      "body": ""
    },
    "ignore": true,
    "code": "define(\n[\n    // Libraries\n    'jQuery', 'Backbone', 'Underscore',\n\n    // Templates\n    'text!/static/templates/facebook/fb-root.html',\n    'text!/static/templates/facebook/fb-login.html',\n    'text!/static/templates/facebook/fb-logout.html'\n],\nfunction($, Backbone, _, t_fbRoot, t_login, t_logout){\n\n    //--------------------------------------------------------------------------\n    //\n    // Configuration\n    //\n    //--------------------------------------------------------------------------\n\n    var \n    // Config\n    isInit, t,\n\n    // Module internal state\n    user, session, login, permissions,\n\n    // Models\n    UserModel, SessionModel, LoginModel, PermissionsModel,\n\n    // Views\n    LoginView;\n\n    t = {\n        root: _.template(t_fbRoot),\n        login: _.template(t_login),\n        logout: _.template(t_logout)\n    };\n    user = session = login = permissions = null;\n\n    //--------------------------------------------------------------------------\n    //\n    // Models\n    //\n    //--------------------------------------------------------------------------"
  },
  {
    "tags": [
      {
        "type": "param",
        "types": [
          "Array"
        ],
        "name": "requested",
        "description": "Model attribute: The liste of permissions requested by the application."
      },
      {
        "type": "param",
        "types": [
          "Array"
        ],
        "name": "granted",
        "description": "Model attribute: The list of permissions granted by the user."
      }
    ],
    "description": {
      "full": "<p><code>PermissionsModel</code></p>\n\n<p>Models the list of requested and granted Facebook permissions.</p>\n\n<h2>Usage</h2>\n\n<pre><code> var permissions = new PermissionsModel();\n permissions.set({'requested': ['user_birthday', 'read_mailbox']});\n</code></pre>",
      "summary": "<p><code>PermissionsModel</code></p>",
      "body": "<p>Models the list of requested and granted Facebook permissions.</p>\n\n<h2>Usage</h2>\n\n<pre><code> var permissions = new PermissionsModel();\n permissions.set({'requested': ['user_birthday', 'read_mailbox']});\n</code></pre>"
    },
    "isPrivate": false,
    "ignore": false,
    "code": "PermissionsModel = Backbone.Model.extend();"
  },
  {
    "tags": [],
    "description": {
      "full": "<p><code>UserModel</code></p>\n\n<p>Models a Facebook user</p>",
      "summary": "<p><code>UserModel</code></p>",
      "body": "<p>Models a Facebook user</p>"
    },
    "ignore": false,
    "code": "UserModel = Backbone.Model.extend();"
  },
  {
    "tags": [],
    "description": {
      "full": "<p><code>SessionModel</code></p>\n\n<p>Models a Facebook session</p>",
      "summary": "<p><code>SessionModel</code></p>",
      "body": "<p>Models a Facebook session</p>"
    },
    "ignore": false,
    "code": "SessionModel = Backbone.Model.extend();"
  },
  {
    "tags": [
      {
        "type": "param",
        "types": [
          "UserModel"
        ],
        "name": "user",
        "description": ""
      },
      {
        "type": "param",
        "types": [
          "SessionModel"
        ],
        "name": "session",
        "description": ""
      }
    ],
    "description": {
      "full": "<p><code>LoginModel</code></p>\n\n<p>Models the relationship between a session and an user.</p>\n\n<h2>Usage</h2>\n\n<pre><code> var user, session, login;\n user = new UserModel;\n session = new SessionModel;\n login = new LoginModel;\n login.set ({\n     user: user,\n     session: session\n });\n</code></pre>",
      "summary": "<p><code>LoginModel</code></p>",
      "body": "<p>Models the relationship between a session and an user.</p>\n\n<h2>Usage</h2>\n\n<pre><code> var user, session, login;\n user = new UserModel;\n session = new SessionModel;\n login = new LoginModel;\n login.set ({\n     user: user,\n     session: session\n });\n</code></pre>"
    },
    "isPrivate": false,
    "ignore": false,
    "code": "LoginModel = Backbone.Model.extend();\n\n    //--------------------------------------------------------------------------\n    //\n    // Views\n    //\n    //--------------------------------------------------------------------------"
  },
  {
    "tags": [
      {
        "type": "param",
        "types": [
          "LoginModel"
        ],
        "name": "model",
        "description": "Allows the view to track changes in both the current session and the current user."
      }
    ],
    "description": {
      "full": "<p><code>LoginView</code></p>\n\n<p>Defines a view that allows the user to log in and out of Facebook. </p>",
      "summary": "<p><code>LoginView</code></p>",
      "body": "<p>Defines a view that allows the user to log in and out of Facebook. </p>"
    },
    "isPrivate": false,
    "ignore": false,
    "code": "LoginView = Backbone.View.extend({\n        tLogin: t.login,\n        tLogout: t.logout,\n        events: {\n            'click .fb-logout-button button': 'logout'\n        },\n\n        initialize: function(){\n            this.model.get('user').bind('change', this.render, this);\n            this.model.get('session').bind('change', this.render, this);\n            this.$el.html(this.tLogin(this.model.get('session').toJSON()));\n            this.$('.fb-login-button').hide();\n        },\n\n        render: function(){\n            var user, session, status;\n\n            user = this.model.get('user');\n            session = this.model.get('session');\n\n            if (session.has('status')){\n                status = session.get('status');\n                if ((status === 'connected') && user.has('name')) {\n                    this.$('.fb-login-button').hide();\n                    this.$el.append(this.tLogout(user.toJSON()));\n                } else if (status !== 'connected') {\n                    this.$('.fb-login-button').show();\n                    if(this.$('.fb-logout-button').length){\n                        this.$('.fb-logout-button').remove();\n                    }\n                }\n            }\n\n            return this;\n        },\n\n        logout: function(){\n            var self = this;\n            FB.logout(function(response){\n                self.model.get('user').clear();\n                updateSession(response);\n            });\n        }\n    });"
  },
  {
    "tags": [],
    "description": {
      "full": "<p>@ignore</p>",
      "summary": "<p>@ignore</p>",
      "body": ""
    },
    "ignore": true,
    "code": "//--------------------------------------------------------------------------\n    //\n    // Module methods\n    //\n    //--------------------------------------------------------------------------\n\n    function updateSession(response) {\n        _.extend(response, {\n            permissions: session.get('permissions')\n        });\n        session.clear({silent:true});\n        session.set(response);\n    }\n\n    //--------------------------------------------------------------------------\n    //\n    // API\n    //\n    //--------------------------------------------------------------------------"
  },
  {
    "tags": [
      {
        "type": "param",
        "types": [
          "Object"
        ],
        "name": "options",
        "description": "Initialization options (listed below)."
      },
      {
        "type": "param",
        "types": [
          "String"
        ],
        "name": "options.appId",
        "description": "Facebook app id"
      },
      {
        "type": "param",
        "types": [
          "Array"
        ],
        "name": "options.permissions",
        "description": "The initial set of permissions requested by the application. Default: <code>undefined</code>"
      },
      {
        "type": "param",
        "types": [
          "Function"
        ],
        "name": "callback",
        "description": "A function to be executed once the facebook module has been initialized. Default: <code>null</code>"
      }
    ],
    "description": {
      "full": "<p><code>facebook.init()</code></p>\n\n<p>Initializes the Facebook api</p>",
      "summary": "<p><code>facebook.init()</code></p>",
      "body": "<p>Initializes the Facebook api</p>"
    },
    "isPrivate": false,
    "ignore": false,
    "code": "function init(options, callback) {\n        var script, id, p;\n\n        if (isInit) {\n            return;\n        }\n\n        id = 'facebook-jssdk';\n\n        if (!$('#fb-root').length) {\n            $('body').append(t.root());\n        }\n\n        user = new UserModel();\n        session = new SessionModel();\n        login = new LoginModel();\n        permissions = new PermissionsModel();\n        if (_.has(options, 'permissions')){\n            addPermissions(options.permissions);\n        }\n        login.set({user: user, session: session});\n\n        window.fbAsyncInit = function() {\n            FB.init({\n                appId: options.appId,\n                status: true, \n                cookie: true,\n                xfbml: true,\n                oauth: true,\n            });\n\n            isInit = true;\n\n            FB.Event.subscribe('auth.login', function(response){\n                updateUser();\n            });\n            FB.Event.subscribe('auth.statusChange', function(response){\n                updateSession(response);\n            });\n            FB.Event.subscribe('auth.authResponseChange', function(response){\n\n            });\n\n            // Force an status update upon initialzation, for cases where the \n            // user is not \"connected\", \"connected\" will fire an \"statusChange\" \n            // event, so no need to fire it twice\n            FB.getLoginStatus(function(response){\n                updateSession(response);\n                if (response.status === 'connected') {\n                    updateUser();\n                }\n            });\n\n            if (callback) {\n                callback();\n            }\n        }\n\n        if ($(id).length) { \n            return; \n        }\n        script = document.createElement('script'); \n        script.id = id; \n        script.async = true;\n        script.src = \"//connect.facebook.net/en_US/all.js\";\n        $('head').append(script);\n    };",
    "ctx": {
      "type": "function",
      "name": "init",
      "string": "init()"
    }
  },
  {
    "tags": [
      {
        "type": "param",
        "types": [
          "String",
          "Array"
        ],
        "name": "permissions",
        "description": "Space separated facebook permissions, or an <code>Array</code> of Facebook permissions."
      },
      {
        "type": "return",
        "types": [
          "LoginView"
        ],
        "description": ""
      }
    ],
    "description": {
      "full": "<p><code>facebook.createLoginView()</code></p>\n\n<p>Creates a login view and ties it with a user model. You need to initialize the Facebook module in order to create a LoginView.</p>",
      "summary": "<p><code>facebook.createLoginView()</code></p>",
      "body": "<p>Creates a login view and ties it with a user model. You need to initialize the Facebook module in order to create a LoginView.</p>"
    },
    "isPrivate": false,
    "ignore": false,
    "code": "function createLoginView (permissions) {\n        if (!isInit) {\n            throw new Error('You need to initialize the Facebook module in order to create a LoginView');\n        }\n        session.set('permissions', permissions || '' );\n        return new LoginView({ model:login });\n    }",
    "ctx": {
      "type": "function",
      "name": "createLoginView",
      "string": "createLoginView()"
    }
  },
  {
    "tags": [],
    "description": {
      "full": "<p><code>facebook.updateUser()</code></p>\n\n<p>Calls <code>FB.api('/me')</code> and updates the <code>UserModel</code> instance in the Facebook module.</p>",
      "summary": "<p><code>facebook.updateUser()</code></p>",
      "body": "<p>Calls <code>FB.api('/me')</code> and updates the <code>UserModel</code> instance in the Facebook module.</p>"
    },
    "ignore": false,
    "code": "function updateUser(){\n        FB.api('/me', function (response) {\n            user.clear({silent:true});\n            user.set(response);\n        });\n    }",
    "ctx": {
      "type": "function",
      "name": "updateUser",
      "string": "updateUser()"
    }
  },
  {
    "tags": [
      {
        "type": "return",
        "types": [
          "UserModel"
        ],
        "description": ""
      }
    ],
    "description": {
      "full": "<p><code>facebook.getUser()</code> </p>\n\n<p>Returns the current <code>UserModel</code> instance.</p>",
      "summary": "<p><code>facebook.getUser()</code> </p>",
      "body": "<p>Returns the current <code>UserModel</code> instance.</p>"
    },
    "isPrivate": false,
    "ignore": false,
    "code": "function getUser() {\n        return user;\n    }",
    "ctx": {
      "type": "function",
      "name": "getUser",
      "string": "getUser()"
    }
  },
  {
    "tags": [
      {
        "type": "return",
        "types": [
          "SessionModel"
        ],
        "description": ""
      }
    ],
    "description": {
      "full": "<p><code>facebook.getSession()</code></p>\n\n<p>Returns the current <code>SessionModel</code> instance.</p>",
      "summary": "<p><code>facebook.getSession()</code></p>",
      "body": "<p>Returns the current <code>SessionModel</code> instance.</p>"
    },
    "isPrivate": false,
    "ignore": false,
    "code": "function getSession() {\n        return session;\n    }",
    "ctx": {
      "type": "function",
      "name": "getSession",
      "string": "getSession()"
    }
  },
  {
    "tags": [
      {
        "type": "return",
        "types": [
          "PermissionsModel"
        ],
        "description": ""
      }
    ],
    "description": {
      "full": "<p><code>facebook.getPermissions()</code></p>\n\n<p>Returns the current <code>PermissionsModel</code> instance.</p>",
      "summary": "<p><code>facebook.getPermissions()</code></p>",
      "body": "<p>Returns the current <code>PermissionsModel</code> instance.</p>"
    },
    "isPrivate": false,
    "ignore": false,
    "code": "function getPermissions() {\n        return permissions;\n    }",
    "ctx": {
      "type": "function",
      "name": "getPermissions",
      "string": "getPermissions()"
    }
  },
  {
    "tags": [
      {
        "type": "param",
        "types": [
          "String",
          "Array"
        ],
        "name": "permissions",
        "description": "If a <code>String</code> is passed, this method will attempt to produce an <code>Array</code> of permissions performing a <code>split(\" \")</code> on the passed <code>String</code>. In an <code>Array</code> is passed, this method will assume each index in the <code>Array</code> contains a permission <code>String</code>."
      },
      {
        "type": "return",
        "types": [
          "Boolean"
        ],
        "description": "<code>true</code> if any permission is added to the <code>requested</code> or <code>false</code> if no permission is added."
      }
    ],
    "description": {
      "full": "<p><code>facebook.addPermissions()</code></p>\n\n<p>Adds one or more permissions to the <code>requested</code> attribute in the <br /><code>PermissionsModel</code>. This method does not attempt to updtate any non-granted<br />permission, just ensures the same permition is not added more than one<br />time to the <code>requested</code> permissions <code>Array</code>.</p>\n\n<p>Complete list of <a href=\"http://developers.facebook.com/docs/reference/api/permissions/\" title=\"Valid Facebook permission strings\">valid Facebook permission strings</a>.</p>",
      "summary": "<p><code>facebook.addPermissions()</code></p>",
      "body": "<p>Adds one or more permissions to the <code>requested</code> attribute in the <br /><code>PermissionsModel</code>. This method does not attempt to updtate any non-granted<br />permission, just ensures the same permition is not added more than one<br />time to the <code>requested</code> permissions <code>Array</code>.</p>\n\n<p>Complete list of <a href=\"http://developers.facebook.com/docs/reference/api/permissions/\" title=\"Valid Facebook permission strings\">valid Facebook permission strings</a>.</p>"
    },
    "isPrivate": false,
    "ignore": false,
    "code": "function addPermissions(permissions) {\n        if (_.isString(permissions)) {\n            permissions = permissions.split(' ');\n        }\n        permissions = _.uniq(permissions);\n        console.log('will try to add: ' + permissions.toString());\n    }",
    "ctx": {
      "type": "function",
      "name": "addPermissions",
      "string": "addPermissions()"
    }
  },
  {
    "tags": [],
    "description": {
      "full": "<p><code>facebook.updatePermissions()</code></p>\n\n<p>Requests all the non-granted permissions and updates the <br /><code>PermissionsModel</code><br />accordingly in the case the user grants additonal permissions.</p>",
      "summary": "<p><code>facebook.updatePermissions()</code></p>",
      "body": "<p>Requests all the non-granted permissions and updates the <br /><code>PermissionsModel</code><br />accordingly in the case the user grants additonal permissions.</p>"
    },
    "ignore": false,
    "code": "function updatePermissions() {\n\n    }\n\n    //--------------------------------------------------------------------------\n    //\n    // Exports\n    //\n    //--------------------------------------------------------------------------",
    "ctx": {
      "type": "function",
      "name": "updatePermissions",
      "string": "updatePermissions()"
    }
  },
  {
    "tags": [],
    "description": {
      "full": "<p>Module exports</p>\n\n<ul>\n<li><code>addPermissions</code></li>\n<li><code>createLoginView</code></li>\n<li><code>getPermissions</code></li>\n<li><code>getSession</code></li>\n<li><code>getUser</code></li>\n<li><code>init</code></li>\n<li><code>updatePermissions</code></li>\n</ul>",
      "summary": "<p>Module exports</p>",
      "body": "<ul>\n<li><code>addPermissions</code></li>\n<li><code>createLoginView</code></li>\n<li><code>getPermissions</code></li>\n<li><code>getSession</code></li>\n<li><code>getUser</code></li>\n<li><code>init</code></li>\n<li><code>updatePermissions</code></li>\n</ul>"
    },
    "ignore": false,
    "code": "return {\n        'addPermissions': addPermissions,\n        'createLoginView': createLoginView,\n        'getPermissions': getPermissions,\n        'getSession': getSession,\n        'getUser': getUser,\n        'init': init,\n        'updatePermissions': updatePermissions\n    };\n})"
  }
]