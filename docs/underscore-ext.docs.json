[
  {
    "tags": [],
    "description": {
      "full": "<p>Underscore extensions module</p>\n\n<p>Adds custom extensions to Underscore.js</p>\n\n<h2>Dependencies</h2>\n\n<ul>\n<li>jQuery</li>\n<li>Underscore.js</li>\n</ul>",
      "summary": "<p>Underscore extensions module</p>",
      "body": "<p>Adds custom extensions to Underscore.js</p>\n\n<h2>Dependencies</h2>\n\n<ul>\n<li>jQuery</li>\n<li>Underscore.js</li>\n</ul>"
    },
    "ignore": false,
    "code": "(function(){\n_.mixin({"
  },
  {
    "tags": [
      {
        "type": "param",
        "types": [
          "Date"
        ],
        "name": "from",
        "description": "The initial date."
      },
      {
        "type": "param",
        "types": [
          "Date"
        ],
        "name": "to",
        "description": "The final date. Default <code>new Date()</code>."
      }
    ],
    "description": {
      "full": "<p><code>age</code></p>\n\n<p>Returns the age in years for a time interval, defined by a pair of <code>Date</code> objects. </p>\n\n<p>If a final date is not provided, age will use <code>new Date()</code> to calculate today's date.</p>",
      "summary": "<p><code>age</code></p>",
      "body": "<p>Returns the age in years for a time interval, defined by a pair of <code>Date</code> objects. </p>\n\n<p>If a final date is not provided, age will use <code>new Date()</code> to calculate today's date.</p>"
    },
    "isPrivate": false,
    "ignore": false,
    "code": "age: function(from, to) {\n        var age, m, msg;\n        msg = '_.age(): \"from\" and \"to\" must be Date objects.';\n        this.assert(from, this.isDate, msg);\n        if (to) {\n            this.assert(to, this.isDate, msg);\n        }\n        to = to || new Date();\n        age = to.getFullYear() - from.getFullYear();\n        m = to.getMonth() - from.getMonth();\n        if (m < 0 || (m === 0 && to.getDate() < from.getDate())) {\n            age--;\n        }\n        return age;\n    },"
  },
  {
    "tags": [
      {
        "type": "param",
        "types": [
          "Object"
        ],
        "name": "value",
        "description": "The value to assert."
      },
      {
        "type": "param",
        "types": [
          "Function"
        ],
        "name": "fn",
        "description": "The function used to perform the assertion."
      },
      {
        "type": "param",
        "types": [
          "String"
        ],
        "name": "message",
        "description": "A message to display on the error thrown when the assertion fails. Default <code>\"\"</code>."
      }
    ],
    "description": {
      "full": "<p><code>assert</code></p>\n\n<p>Asserts a value or array of values using an asertion function. The assertion function must return <code>true</code> if the assertion is succeeds or <code>false</code> otherwise.</p>",
      "summary": "<p><code>assert</code></p>",
      "body": "<p>Asserts a value or array of values using an asertion function. The assertion function must return <code>true</code> if the assertion is succeeds or <code>false</code> otherwise.</p>"
    },
    "isPrivate": false,
    "ignore": false,
    "code": "assert: function(value, fn, message) {\n        var prefix = 'Assertion failed';\n        if (!fn.call(this, value)) {\n            throw new Error(message ? prefix + ': ' + message : prefix);\n        }\n    }\n});\n})();"
  }
]